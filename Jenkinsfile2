pipeline {
  agent {
    docker { 
      image 'android14'
      args '-u root --device /dev/kvm'
    }
  }

  tools {
    nodejs 'NodeJS'
    maven 'mvn'
  } 

 
  parameters {
       choice(name: 'AVD', choices: ['S24_Ultra', 'S24', 'S23_Ultra', 'S23' , 'Default'], description: 'Name of your device')
       // string(name: 'AVD', defaultValue: 'Galaxy_S22', description: 'Name of your device')
       // string(name: 'WIDTH', defaultValue: '', description: 'Device resolution Width')
       // string(name: 'HEIGHT', defaultValue: '', description: 'Device resolution Height')
    }

  stages {
    stage('Install Maven') {
      steps {
        script {
          sh 'apt-get update && apt-get install -y maven'
        }
      }
    }
    
    stage('Create AVD') {
      steps {
          script {
          try {
            sh "avdmanager -s create avd -k 'system-images;android-34;google_apis;x86_64' -n ${AVD}"
            sh 'sleep 20'
           } catch (err) {}
          }
      }
    }

    

    stage('Emulator & Appium (Parallel)') {
      parallel {
        stage('Start Emulator') {
          steps {
            script {
              def widthHeight = [
                'S24_Ultra': '1440x3120',
                'S24': '1080x2340',
                'S23_Ultra': '1440x3088',
                'S23': '1080x2340',
                'Default': '480x800'
            ].get(AVD)
              try {
                sh "emulator -avd ${AVD} -no-window -gpu off -skin ${widthHeight}"
              } catch (err) {}
            }
          }
        }


        stage('Start Appium') {
          steps {
            script {
              try {
                sh 'appium'
              } catch (err) {}
            }
          }
        }
  
        stage('Run Tests') {
          steps {
            script {
              sh 'sleep 60'
              sh 'mvn clean test'
            }
          }

          post {
            always {
              script {
                sh "ps aux | grep emulator | grep -v grep | awk '{print \$2}' | xargs kill -9"
                sh "pkill -f node"
              }
            }
          }
        }
      }
    }
  }

}
