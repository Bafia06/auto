pipeline {
  agent {
    docker {
      image 'android14'
      args '-u root --device /dev/kvm'
    }
  }

  parameters {
    choice(name: 'Model', choices: ['S24_Ultra', 'S24', 'S23_Ultra', 'S23', 'Default'], description: 'Model of your device')
  }

  stages {

    stage('Start Appium') {
          steps {
            script {
              sh 'apt-get -y install maven'
            }
          }
        }

    stage('Create AVD') {
      steps {
        script {
          try {
            sh "avdmanager -s create avd -k 'system-images;android-34;google_apis;x86_64' -n ${Model}"
            
            
          } catch (err) {}
        }
      }
    }

    stage('Modify the avd ini file') {
      steps {
        script {
          def width = [
            'S24_Ultra': 1440,
            'S24': 1080,
            'S23_Ultra': 1440,
            'S23': 1080,
            'Default': 480
          ].get(Model)

          def height = [
            'S24_Ultra': 3120,
            'S24': 2340,
            'S23_Ultra': 3088,
            'S23': 2340,
            'Default': 800
          ].get(Model)

          def density = [
            'S24_Ultra': 505,
            'S24': 416,
            'S23_Ultra': 500,
            'S23': 425,
            'Default': 210
          ].get(Model)

          sh """
                    # Change hw.lcd.density value
                    sed -i 's/^hw.lcd.density=.*/hw.lcd.density=${density}/' /root/.android/avd/${Model}.avd/config.ini

                    # Change hw.lcd.height value
                    sed -i 's/^hw.lcd.height=.*/hw.lcd.height=${height}/' /root/.android/avd/${Model}.avd/config.ini

                    # Change hw.lcd.width value
                    sed -i 's/^hw.lcd.width=.*/hw.lcd.width=${width}/' /root/.android/avd/${Model}.avd/config.ini
                    """

        }
      }
    }

    stage('Emulator & Appium (Parallel)') {
      parallel {
        stage('Start Emulator') {
          steps {
            script {
              try {
                sh "emulator -avd ${Model} -no-boot-anim -no-window"
              } catch (err) {}
            }
          }
        }

        stage('Start Appium') {
          steps {
            script {
              try {
                sh 'appium'
              } catch (err) {}
            }
          }
        }

        stage('Run Tests') {
          steps {
            script {
              sh '''
                boot_completed=""
                until [ "$boot_completed" = "1" ]; do
                  sleep 10
                  boot_completed=$(adb -e shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
                done
              '''
              sh 'mvn clean test'
            }
          }

          post {
            always {
              script {
                sh "ps aux | grep emulator | grep -v grep | awk '{print \$2}' | xargs kill -9"
                sh "pkill -f node"
              }
            }
          }
        }
      }
    }
  }

}
