pipeline {
  agent {
    label 'windows'
  }

  tools {
    nodejs 'NodeJS'
    maven 'mvn'
  } 

 
  parameters {
        
        choice(name: 'androidVersion',choices: ['6', '7.0','7.1','8.0','8.1','9','10','11','12','12L','13','14','15'], description: 'Android Version')
        choice(name: 'arch', choices: ['x86', 'arm64-v8a', 'x86_64'], description: 'Target Architecture')
        choice(name: 'sysImage', choices: ['default', 'google_apis', 'google_apis_playstore', 'android-wear', 'android-tv'] , description: 'System image')
    }

  stages {
    /*stage('Install Appium') {
      steps {
        bat 'npm install -g appium'
        script {
          try {
            bat 'appium driver install uiautomator2'
          } catch (err) {}
        }
      }
    }*/

    stage('Download Images') {
      steps {
        script {
            def apiLevel = [
                '6': 23,
                '7.0': 24,
                '7.1': 25,
                '8.0': 26,
                '8.1': 27,
                '9': 28,
                '10': 29,
                '11': 30,
                '12': 31,
                '12L': 32,
                '13': 33,
                '14': 34,
                '15': 35
            ].get(androidVersion)

            
            bat "sdkmanager system-images;android-${apiLevel};%sysImage%;%arch%"

            
        }
      }
    }

    /*stage('Create AVD') {
      steps {
        script{
          def apiLevel = [
                '6': 23,
                '7.0': 24,
                '7.1': 25,
                '8.0': 26,
                '8.1': 27,
                '9': 28,
                '10': 29,
                '11': 30,
                '12': 31,
                '12L': 32,
                '13': 33,
                '14': 34,
                '15': 35
            ].get(androidVersion)
          try {
            bat 'avdmanager -s create avd -c 100M -k system-images;android-${apiLevel};%sysImage%;%arch% -n %AVD%'
          } catch (err) {}
        }
      }
    }

    stage('Emulator & Appium (Parallel)') {
      parallel {
        stage('Create Emulator') {
          steps {
            script {
              try {
                bat 'emulator -avd %AVD% -no-window -gpu off'
              } catch (err) {}
            }
          }
        }

        stage('Start Appium') {
          steps {
            script {
              try {
                bat 'appium'
              } catch (err) {}
            }
          }
        }

        stage('Run Tests') {
          steps {
            script {
              bat 'powershell -command "Start-Sleep -s 30"'
              bat 'mvn clean test'
            }
          }

          post {
            always {
              script {
                bat 'taskkill /F /IM node.exe /T'
                bat 'taskkill /F /IM emulator.exe /T'
              }
            }
          }
        }
      }
    }*/
  }

}
